version: 2.1
# Pull in gcloud sdk setup in commands
orbs:
  gcp-cli: circleci/gcp-cli@1.0.2

###############################################################################
# Workflows
###############################################################################
workflows:
  version: 2.1
  untagged:
    jobs:
      - test:
          filters:
            tags:
              ignore: /v[0-9]+\.[0-9]+\.[0-9]+/
  # tagged:
  #   jobs:
  #     - build_go:
  #         filters:
  #           tags:
  #             only: /v[0-9]+\.[0-9]+\.[0-9]+/
  #           branches:
  #             ignore: /.*/
  #     - publish_gcr:
  #         requires:
  #           - build_go
  #         filters:
  #           tags:
  #             only: /v[0-9]+\.[0-9]+\.[0-9]+/
  #           branches:
  #             ignore: /.*/
  #     - deploy_gke:
  #         requires:
  #           - publish_gcr
  #         filters:
  #           tags:
  #             only: /v[0-9]+\.[0-9]+\.[0-9]+/
  #           branches:
  #             ignore: /.*/


###############################################################################
# Job Definitions
###############################################################################
jobs:
  # Run tests
  test:
    docker:
      - image: circleci/node:9.11.2
    working_directory: ~/k8s-demo-chat-ui
    steps:
      - checkout
      - run: npm run build
      - run: npm run lint
  
  # Build binaries
  # build_go:
  #   docker:
  #     - image: circleci/golang:1.12
  #   working_directory: /go/src/github.com/Kochava/k8s-demo-chat
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: /go/src/github.com/Kochava/k8s-demo-chat
  #     - run: make update servers
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - bin
  #           - docker
  #           - contrib
  
  # # Build and publish frontend container
  # publish_gcr:
  #   machine: true
  #   working_directory: /tmp/workspace
  #   steps:
  #     - attach_workspace:
  #         at: /tmp/workspace
  #     - gcr_auth
  #     - gcr_build_and_publish:
  #         dockerfile: docker/chat-server/Dockerfile
  #         image-name: k8sdemo-chat-server
  # deploy_gke:
  #   docker:
  #     - image: circleci/buildpack-deps:xenial
  #   steps:
  #     - gke_kubectl_install
  #     - gke_auth:
  #         cluster: k8s-demo-cluster
  #     - gke_deploy:
  #         cluster: k8s-demo-cluster
  #         namespace: k8s-demo
  #         deployment: chat-server
  #         image-name: k8sdemo-chat-server

###############################################################################
# Custom commands
###############################################################################
commands:
  gcr_auth:
    parameters:
      gcloud-service-key:
        type: env_var_name
        default: GCLOUD_SERVICE_KEY
      google-project-id:
        type: env_var_name
        default: GOOGLE_PROJECT_ID
      google-compute-zone:
        type: env_var_name
        default: GOOGLE_COMPUTE_ZONE
    steps:
      - gcp-cli/install
      - gcp-cli/initialize:
          google-project-id: <<parameters.google-project-id>>
          google-compute-zone: <<parameters.google-compute-zone>>
      - run:
          name: Authenticate to GCR
          command: |
            if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
            mkdir -p /home/circleci/.docker
            $SUDO gcloud alpha auth configure-docker --quiet --project $<<parameters.google-project-id>>
            $SUDO chown circleci:circleci /home/circleci/.docker -R

            if [[ -d /home/circleci/.config ]]; then
              $SUDO chown circleci:circleci /home/circleci/.config -R
            fi

  gcr_build_and_publish:
    parameters:
      google-project-id:
        type: env_var_name
        default: GOOGLE_PROJECT_ID
      dockerfile:
        type: string
        default: "Dockerfile"
      image-name:
        type: string
      tag:
        type: env_var_name
        default: CIRCLE_TAG
    steps:
      - run:
          name: Build <<parameters.image-name>> docker image
          command: |
            docker build -t gcr.io/$<<parameters.google-project-id>>/<<parameters.image-name>>:$<<parameters.tag>> -f <<parameters.dockerfile>> .
            docker tag gcr.io/$<<parameters.google-project-id>>/<<parameters.image-name>>:$<<parameters.tag>> gcr.io/$<<parameters.google-project-id>>/<<parameters.image-name>>:latest
      - run:
          name: Publish <<parameters.image-name>>:$<<parameters.tag>> docker image
          command: |
            docker push gcr.io/$<<parameters.google-project-id>>/<<parameters.image-name>>:$<<parameters.tag>>
            docker push gcr.io/$<<parameters.google-project-id>>/<<parameters.image-name>>:latest

  gke_kubectl_install:
    parameters:
      k8sversion:
        type: string
        default: "v1.11.5"
    steps:
      - run:
          name: Installing kubctl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/<<parameters.k8sversion>>/bin/linux/amd64/kubectl
            chmod +x ./kubectl
  
  gke_auth:
    parameters:
      gcloud-service-key:
        type: env_var_name
        default: GCLOUD_SERVICE_KEY
      google-project-id:
        type: env_var_name
        default: GOOGLE_PROJECT_ID
      google-compute-zone:
        type: env_var_name
        default: GOOGLE_COMPUTE_ZONE
      cluster:
        type: string
      region:
        type: string
        default: "us-central1"
    steps:
      - gcp-cli/install
      - gcp-cli/initialize:
          google-project-id: <<parameters.google-project-id>>
          google-compute-zone: <<parameters.google-compute-zone>>
      - run:
          name: Authenticate to <<parameters.cluster>> and set up kubectl
          command: |
            if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
            mkdir -p /home/circleci/.kube
            $SUDO gcloud container clusters get-credentials <<parameters.cluster>> --project $<<parameters.google-project-id>> --region <<parameters.region>>
            $SUDO chown circleci:circleci /home/circleci/.kube -R

            if [[ -d /home/circleci/.config ]]; then
              $SUDO chown circleci:circleci /home/circleci/.config -R
            fi
  gke_deploy:
    parameters:
      google-project-id:
        type: env_var_name
        default: GOOGLE_PROJECT_ID
      cluster:
        type: string
      image-name:
        type: string
      tag:
        type: env_var_name
        default: CIRCLE_TAG
      deployment:
        type: string
      namespace:
        type: string
        default: "default"
    steps:
      - run:
          name: Deploying <<parameters.image-name>>:$<<parameters.tag>> to <<parameters.cluster>>
          command: |
            ./kubectl -n <<parameters.namespace>> set image deployments/<<parameters.deployment>> <<parameters.image-name>>=gcr.io/$<<parameters.google-project-id>>/<<parameters.image-name>>:$<<parameters.tag>>

